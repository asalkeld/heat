#!/usr/bin/env python
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Heat Observer Server.  This currently does the work of writing the
observed state of the resource to the database.
"""

import eventlet
eventlet.monkey_patch()

import os
import sys

# If ../heat/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'heat', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)

from oslo.config import cfg

from heat.common import messaging
from heat.openstack.common import gettextutils
from heat.openstack.common import log as logging
from heat.openstack.common import service
from heat.rpc import api as rpc_api

# (FIXME): Need to manually import something from heat.common.config
# to access the parameters defined within heat.common.config.
cfg.CONF.import_opt('host', 'heat.common.config')
gettextutils.enable_lazy()
gettextutils.install('heat', lazy=True)

LOG = logging.getLogger('heat.observer')

if __name__ == '__main__':
    cfg.CONF(project='heat', prog='heat-observer')
    logging.setup('heat')
    messaging.setup()

    from heat.observer import service as observer

    srv = observer.ObserverService(cfg.CONF.host, rpc_api.OBSERVER_TOPIC)
    launcher = service.launch(srv, workers=cfg.CONF.num_observer_workers)
    launcher.wait()
